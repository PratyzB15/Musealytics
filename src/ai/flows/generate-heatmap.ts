'use server';
/**
 * @fileOverview Generates a heatmap of visitor activity in the museum.
 *
 * - generateHeatmap - A function that generates a heatmap based on visitor data.
 * - GenerateHeatmapInput - The input type for the generateHeatmap function.
 * - GenerateHeatmapOutput - The return type for the generateHeatmap function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateHeatmapInputSchema = z.object({
  galleryLayout: z
    .string()
    .describe('Description of the gallery layout, including exhibit locations.'),
  visitorData: z
    .string()
    .describe(
      'Visitor data, including timestamps and locations, suitable for heatmap generation.'
    ),
});

export type GenerateHeatmapInput = z.infer<typeof GenerateHeatmapInputSchema>;

const GenerateHeatmapOutputSchema = z.object({
  heatmapDataUri: z
    .string()
    .describe(
      "A data URI containing the generated heatmap image, must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  analysis: z
    .string()
    .describe(
      'An analysis of the heatmap, highlighting popular and underutilized areas.'
    ),
});

export type GenerateHeatmapOutput = z.infer<typeof GenerateHeatmapOutputSchema>;

export async function generateHeatmap(input: GenerateHeatmapInput): Promise<GenerateHeatmapOutput> {
  return generateHeatmapFlow(input);
}

// The original prompt defined with ai.definePrompt is removed as we are directly using ai.generate for image and text.
// If more complex structured text output or tool use were needed *after* image generation,
// one might chain this flow's output into another prompt/flow.

const generateHeatmapFlow = ai.defineFlow(
  {
    name: 'generateHeatmapFlow',
    inputSchema: GenerateHeatmapInputSchema,
    outputSchema: GenerateHeatmapOutputSchema,
  },
  async (input: GenerateHeatmapInput) => {
    const imageGenerationPrompt = `
Generate a heatmap image representing visitor density and dwell times based on the following museum gallery layout and visitor data.
The heatmap should visually highlight popular and underutilized areas.

Gallery Layout:
${input.galleryLayout}

Visitor Data:
${input.visitorData}

In addition to the heatmap image, provide a concise textual analysis of this heatmap, focusing on popular zones, underutilized areas, and any observable patterns in visitor traffic.
    `;

    try {
      const {media, text} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp', // Model capable of image generation
        prompt: imageGenerationPrompt,
        config: {
          responseModalities: ['TEXT', 'IMAGE'], // Expect both text and image in response
           safetySettings: [ // Relax safety settings for potentially complex data visualization
            { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_ONLY_HIGH' },
            { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
            { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          ],
        },
      });

      const heatmapDataUri = media?.url;
      const analysisText = text || "AI analysis could not be generated for this heatmap.";
      
      if (!heatmapDataUri) {
        // This case should ideally be handled by the model, but as a fallback:
        console.warn("Heatmap image data URI was not generated by the AI model.");
        return {
          heatmapDataUri: '', // UI will use placeholder
          analysis: analysisText || "Heatmap image could not be generated. Analysis based on input data: No specific insights without visual heatmap.",
        };
      }

      return {
        heatmapDataUri: heatmapDataUri,
        analysis: analysisText,
      };

    } catch (error) {
        console.error("Error during AI heatmap generation:", error);
        // Provide a fallback response that matches the schema
        return {
            heatmapDataUri: '', // Indicate failure to generate image
            analysis: `Error generating heatmap. ${ (error as Error).message || 'An unexpected error occurred.' } Please check the input data and try again.`,
        };
    }
  }
);
